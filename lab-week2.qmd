---
title: "EDS 223: week 2"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
rm(list=ls())
library(sf)
library(tidyverse)
library(spData)
library(tmap)
```

```{r}
london_point <- st_point(c(0.1, 51.5))

london_geom <- st_sfc(london_point, crs = 4326)

london_attribute <- data.frame(
  name = "London", 
  temperature = 25,
  date = as.Date("2017-06-21")
)

london_sf <- st_sf(london_attribute, geometry = london_geom)

class(london_sf)
# FOR HOMEWORK ADD CHECKS OF CLASS TO SEE WHAT U WANTED HAPPENED

st_crs(london_sf)$IsGeographic
# ALSO GOOD TO CHECK WHAT COORDINATE REFERENCE SYSTEM // $IsGeographic  - returns true or false
```

```{r}
world <- spData::world

names(world)

summary(world$lifeExp)
```

```{r}
world_df <- world %>% 
  select(-geom)

world_df <- world %>% 
  select(continent)

colnames(world_df)

# SF MADE GEOM COLUMN STICKY AND HARD TO GET RID OF
```

```{r}
world_df <- st_drop_geometry(world)

class(world_df)
```

## Reprojecting data

```{r}
london_proj <- data.frame(x = 53000, y = 180000) %>% 
  st_as_sf(coords = c("x", "y"), crs = "EPSG:27700")

st_crs(london_proj) == st_crs(london_sf)
# GOOD CONDITIONAL CHECK TO SEE IF THE COORDINATE REFERENCE SYSTEMS MATCH
london_sf_transfer <- st_transform(london_sf, crs = st_crs(london_proj))
# GOING TO COME UP A LOT
```

```{r}
if(st_crs(london_sf_transfer) == st_crs(london_proj)) {
  print("coordinaate reference systems of datasets match")
  } else {
    warning("coordinate reference systems do not match")
  }
# could do error instead of warning
```

```{r}
tm_shape(world, projection = 8857) +
  tm_fill(col = "area_km2")
```

```{r}
tm_shape(world, projection = 3395) +
  tm_fill(col = "area_km2")
```

```{r}
world %>%
  select(name_long, pop)
```

```{r}
world %>%
  select(-subregion, -area_km2)
```

```{r}
world %>%
  select(name = name_long, population = pop)
```

```{r}
world1 <- world %>%
  filter(area_km2 < 10000)

summary(world1$area_km2)
```

```{r}
world %>%
  filter(continent == "Asia") %>%
  select(name_long, continent, lifeExp) %>%
  slice_max(lifeExp) %>%
  st_drop_geometry()

# slice_max picks the row that has the highest lifeExp (variable you put in it)
```

```{r}
world %>% 
  group_by(continent) %>% 
  summarise(population = sum(pop, na.rm = TRUE)) %>% 
  st_drop_geometry()
```

# Joins with vector attributes

```{r}
coffee_data <- spData::coffee_data

nrow(coffee_data)
nrow(world)
# can make a conditional statement in workflow to compare
```

```{r}
world_coffee <- left_join(world, coffee_data, by = "name_long")
class(world_coffee)
```

```{r}
tm_shape(world_coffee) +
  tm_fill(col = "coffee_production_2017")
```

```{r}
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long")

if(nrow(world_coffee_inner) < nrow(coffee_data)) {
  warning("inner join doesn't match original data, potential data loss during join")
}
```

```{r}
# tells you what is in coffee data, thats not in world data
setdiff(coffee_data$name_long, world$name_long)
```

```{r}
drc <- stringr::str_subset(world$name_long, "Dem*.+Congo")
```

```{r}
coffee_data$name_long[stringr::str_detect(coffee_data$name_long, "Congo")] <- drc
```

```{r}
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long")

if(nrow(world_coffee_inner) < nrow(coffee_data)) {
  warning("inner join doesn't match original data, potential data loss during join")
}
```

```{r}
tm_shape(world_coffee_inner) +
  tm_polygons(fill = "coffee_production_2017",
              title = "Coffee Production (2017)") +
  tm_layout(legend.outside = TRUE)
  
```





